
// interface BaseProps {
//     className: string
//     [key: string]: unknown
// }
// type OrNull<T> = T | null

// export const Button = React.forwardRef(
//     (
//         {
//             className,
//             active,
//             reversed,
//             ...props
//         }: PropsWithChildren<
//             {
//                 active: boolean
//                 reversed: boolean
//             } & BaseProps
//         >,
//         ref: Ref<OrNull<HTMLSpanElement>> | any
//     ) => (
//         <span
//             {...props}
//             ref={ref}

//         />
//     )
// )

// const LIST_TYPES = ['numbered-list', 'bulleted-list']

// const toggleBlock = (editor: CustomEditor, format: any | Omit<FormattedText, "text">) => {
//     const isActive = isBlockActive(editor, format)
//     const isList = LIST_TYPES.includes(format)

//     // Transforms.unwrapNodes(editor, {
//     //     match: (n: Node| string) =>
//     //         LIST_TYPES.includes(
//     //             !Editor.isEditor(n) && SlateElement.isElement(n) && n.type
//     //         ),
//     //     split: true,
//     // })
//     const newProperties: Partial<SlateElement> = {
//         type: isActive ? 'paragraph' : isList ? 'list-item' : format,
//     }
//     Transforms.setNodes(editor, newProperties)

//     if (!isActive && isList) {
//         const block = { type: format, children: [] }
//         Transforms.wrapNodes(editor, block)
//     }
// }

// const toggleMark = (editor: CustomEditor, format: string) => {
//     const isActive = isMarkActive(editor, format)

//     if (isActive) {
//         Editor.removeMark(editor, format)
//     } else {
//         Editor.addMark(editor, format, true)
//     }
// }

// const isBlockActive = (editor: CustomEditor, format: any | Omit<FormattedText, "text">) => {
//     const [match] = Editor.nodes(editor, {
//         match: n =>
//             !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,
//     })

//     return !!match
// }

// const isMarkActive = (editor: CustomEditor, format: any) => {
//     const marks: Omit<FormattedText, "text"> | null = Editor.marks(editor)
//     return marks ? marks[format] === true : false
// }

// export const Element = ({ attributes, children, element }: { attributes: any, children: any, element: any }) => {
//     switch (element.type) {
//         case 'block-quote':
//             return <blockquote {...attributes}>{children}</blockquote>
//         case 'bulleted-list':
//             return <ul {...attributes}>{children}</ul>
//         case 'heading-one':
//             return <h1 {...attributes}>{children}</h1>
//         case 'heading-two':
//             return <h2 {...attributes}>{children}</h2>
//         case 'list-item':
//             return <li {...attributes}>{children}</li>
//         case 'numbered-list':
//             return <ol {...attributes}>{children}</ol>
//         default:
//             return <p {...attributes}>{children}</p>
//     }
// }

// export const Leaf = ({ attributes, children, leaf }: { attributes: any, children: any, leaf: any }) => {
//     if (leaf.bold) {
//         children = <strong>{children}</strong>
//     }

//     if (leaf.code) {
//         children = <code>{children}</code>
//     }

//     if (leaf.italic) {
//         children = <em>{children}</em>
//     }

//     if (leaf.underline) {
//         children = <u>{children}</u>
//     }

//     return <span {...attributes}>{children}</span>
// }

// export const Icon = React.forwardRef(
//     (
//         { className, ...props }: PropsWithChildren<BaseProps>,
//         ref: LegacyRef<HTMLSpanElement>
//     ) => (
//         <span
//             {...props}
//             ref={ref}

//         />
//     )
// )

// export const BlockButton = ({ format, icon }: { format: any, icon: any }) => {
//     const editor = useSlate()
//     return (
//         <Button
//             active={isBlockActive(editor, format)}
//             onMouseDown={(event: Event) => {
//                 event.preventDefault()
//                 toggleBlock(editor, format)
//             }}
//         >
//             <Icon>{icon}</Icon>
//         </Button>
//     )
// }

// export const MarkButton = ({ format, icon }: { format: any, icon: any }) => {
//     const editor = useSlate()
//     return (
//         <Button
//             active={isMarkActive(editor, format)}
//             onMouseDown={(event: Event) => {
//                 event.preventDefault()
//                 toggleMark(editor, format)
//             }}
//         >
//             <Icon>{icon}</Icon>
//         </Button>
//     )
// }

// export const Menu = React.forwardRef(
//     (
//         { className, ...props }: PropsWithChildren<BaseProps>,
//         ref: LegacyRef<HTMLDivElement>
//     ) => (
//         <div
//             {...props}
//             ref={ref}

//         />
//     )
// )


// export const Toolbar = React.forwardRef(
//     (
//         { ...props }: PropsWithChildren<BaseProps>,
//         ref: LegacyRef<HTMLDivElement>
//     ) => (
//         <Menu
//             {...props}
//         // ref={ref}

//         />

//     ))